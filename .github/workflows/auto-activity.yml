name: Actividad de Desarrollo E5

on:
  schedule:
    # Se ejecuta los lunes, miércoles y viernes a las 10:00 UTC
    # Esto asegura una actividad más frecuente para mantener la suscripción activa
    - cron: '0 10 * * 1,3,5'
  
  # Permite la ejecución manual desde la pestaña Actions de GitHub.
  workflow_dispatch: {}

# Permisos necesarios para el workflow
permissions:
  id-token: write   # Para el login con Azure (OIDC)
  contents: write   # Para hacer commit del log de actividad

jobs:
  activity:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: 1. Checkout del repositorio
        uses: actions/checkout@v4

      - name: 2. Registrar inicio de actividad local
        run: |
          echo "Inicio de actividad de desarrollo: $(date)" >> activity.log

      - name: 3. Login con Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          'tenant-id': ${{ secrets.AZURE_TENANT_ID }} # Suggested change: key quoted
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: 4. Obtener token de acceso para Microsoft Graph
        id: get_token
        run: |
          TOKEN=$(az account get-access-token \
            --resource https://graph.microsoft.com \
            --query accessToken -o tsv)
          echo "TOKEN=$TOKEN" >> $GITHUB_OUTPUT
          echo "Token de acceso para Graph obtenido exitosamente."

      - name: 5. Configurar variables dinámicas
        run: |
          UNIQUE_SUFFIX=$(date +%Y%m%d-%H%M%S)
          echo "TEAMS_CHANNEL_NAME=auto-canal-${UNIQUE_SUFFIX}" >> $GITHUB_ENV
          echo "SHAREPOINT_FILE_NAME=actividad-log-${UNIQUE_SUFFIX}.txt" >> $GITHUB_ENV
          echo "UNIQUE_SUFFIX=${UNIQUE_SUFFIX}" >> $GITHUB_ENV

      - name: 6. Crear canal en Microsoft Teams
        id: create_teams_channel
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          TEAM_ID: ${{ secrets.MS_TEAMS_TEAM_ID }}
        run: |
          echo "Intentando crear canal '${{ env.TEAMS_CHANNEL_NAME }}' en Teams..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/teams/$TEAM_ID/channels" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"displayName\":\"${{ env.TEAMS_CHANNEL_NAME }}\",\"description\":\"Canal automático generado por GitHub Actions para actividad E5\",\"membershipType\":\"standard\"}")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" -eq 201 ]; then
            CHANNEL_ID=$(echo "$BODY" | jq -r '.id')
            echo "Canal '${{ env.TEAMS_CHANNEL_NAME }}' creado exitosamente con ID: $CHANNEL_ID"
            echo "TEAMS_CHANNEL_ID=$CHANNEL_ID" >> $GITHUB_ENV
          else
            echo "Error al crear el canal. Código: $HTTP_CODE"
            echo "Respuesta: $BODY"
            exit 1
          fi

      - name: 7. Subir archivo a SharePoint
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
        run: |
          echo "Contenido generado automáticamente el $(date)" > temp_file.txt
          echo "Intentando subir archivo '${{ env.SHAREPOINT_FILE_NAME }}' a SharePoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
            "https://graph.microsoft.com/v1.0/sites/$SHAREPOINT_SITE_ID/drive/root:/${{ env.SHAREPOINT_FILE_NAME }}:/content" \
            -H "Authorization: Bearer $TOKEN" \
            -T temp_file.txt)
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "Archivo '${{ env.SHAREPOINT_FILE_NAME }}' subido exitosamente a SharePoint."
          else
            echo "Error al subir el archivo. Código: $HTTP_CODE"
            echo "Respuesta: $BODY"
            exit 1
          fi
          rm temp_file.txt

      - name: 8. Ejecutar Flow en Power Automate
        env:
          POWER_AUTOMATE_HTTP_TRIGGER_URL: ${{ secrets.POWER_AUTOMATE_HTTP_TRIGGER_URL }}
        run: |
          echo "Intentando ejecutar Flow en Power Automate..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ env.POWER_AUTOMATE_HTTP_TRIGGER_URL }}" \
            -H "Content-Type: application/json" \
            -d "{\"source\":\"GitHub Actions E5\",\"suffix\":\"${{ env.UNIQUE_SUFFIX }}\"}")

          if [ "$HTTP_CODE" -eq 202 ]; then
            echo "Flow en Power Automate ejecutado exitosamente (Respuesta: $HTTP_CODE)."
          else
            echo "Error al ejecutar Flow en Power Automate (Respuesta: $HTTP_CODE)."
          fi

      - name: 9. Crear evento en Calendario de Outlook
        id: create_calendar_event
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Intentando crear evento en Calendario..."
          START_TIME=$(date -u -d '+1 hour' --iso-8601=seconds)
          END_TIME=$(date -u -d '+1 hour 5 minutes' --iso-8601=seconds)

          JSON_BODY=$(jq -n \
            --arg subject "Actividad E5 - ${{ env.UNIQUE_SUFFIX}}" \
            --arg content "<p>Evento generado por GitHub Actions para mantener actividad E5.</p>" \
            --arg startTime "$START_TIME" \
            --arg endTime "$END_TIME" \
            '{subject: $subject, body: {contentType: "HTML", content: $content}, start: {dateTime: $startTime, timeZone: "UTC"}, end: {dateTime: $endTime, timeZone: "UTC"}}')

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/calendar/events" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_BODY")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" -eq 201 ]; then
            EVENT_ID=$(echo "$BODY" | jq -r '.id')
            echo "Evento de calendario creado exitosamente con ID: $EVENT_ID"
            echo "OUTLOOK_EVENT_ID=$EVENT_ID" >> $GITHUB_ENV
          else
            echo "Error al crear evento de calendario. Código: $HTTP_CODE"
            echo "Respuesta: $BODY"
          fi

      - name: 10. Crear documento en OneDrive
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
        run: |
          echo "Creando documento en OneDrive..."
          CONTENT="Reporte de Actividad E5\nFecha: $(date)\nActividades realizadas:\n- Creación de canal en Teams\n- Subida de archivo a SharePoint\n- Ejecución de Flow\n- Creación de evento en calendario"
          
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
            "https://graph.microsoft.com/v1.0/me/drive/root:/reportes/actividad-${{ env.UNIQUE_SUFFIX }}.txt:/content" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: text/plain" \
            --data-raw "$CONTENT")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -eq 201 ] || [ "$HTTP_CODE" -eq 200 ]; then
            echo "Documento creado exitosamente en OneDrive"
          else
            echo "Error al crear documento en OneDrive. Código: $HTTP_CODE"
          fi

      - name: 11. Enviar correo con resumen
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Enviando correo con resumen de actividades..."
          EMAIL_BODY="Se han completado las siguientes actividades:\n\n"
          EMAIL_BODY+="- Canal Teams: ${{ env.TEAMS_CHANNEL_NAME }}\n"
          EMAIL_BODY+="- Archivo SharePoint: ${{ env.SHAREPOINT_FILE_NAME }}\n"
          EMAIL_BODY+="- Evento calendario: Actividad E5 - ${{ env.UNIQUE_SUFFIX }}\n"
          EMAIL_BODY+="- Documento OneDrive: actividad-${{ env.UNIQUE_SUFFIX }}.txt\n"
          
          JSON_BODY=$(jq -n \
            --arg to "$USER_EMAIL" \
            --arg subject "Resumen Actividad E5 - ${{ env.UNIQUE_SUFFIX }}" \
            --arg content "$EMAIL_BODY" \
            '{message: {subject: $subject, body: {contentType: "Text", content: $content}, toRecipients: [{emailAddress: {address: $to}}]}}')

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            "https://graph.microsoft.com/v1.0/me/sendMail" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_BODY")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -eq 202 ]; then
            echo "Correo enviado exitosamente"
          else
            echo "Error al enviar correo. Código: $HTTP_CODE"
          fi

      - name: Limpieza - Eliminar recursos creados
        # Este paso se ejecuta siempre para evitar dejar basura, incluso si un paso anterior falla.
        if: always()
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          TEAM_ID: ${{ secrets.MS_TEAMS_TEAM_ID }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
          CHANNEL_ID: ${{ env.TEAMS_CHANNEL_ID }}
          FILE_NAME: ${{ env.SHAREPOINT_FILE_NAME }}
          EVENT_ID: ${{ env.OUTLOOK_EVENT_ID }}
        run: |
          if [ -n "$CHANNEL_ID" ]; then
            echo "Limpiando: Intentando eliminar canal '$CHANNEL_ID'..."
            curl -s -X DELETE "https://graph.microsoft.com/v1.0/teams/$TEAM_ID/channels/$CHANNEL_ID" -H "Authorization: Bearer $TOKEN"
            echo "Intento de eliminación de canal completado."
          fi
          
          if [ -n "$FILE_NAME" ]; then
            echo "Limpiando: Intentando eliminar archivo '$FILE_NAME'..."
            curl -s -X DELETE "https://graph.microsoft.com/v1.0/sites/$SHAREPOINT_SITE_ID/drive/root:/$FILE_NAME" -H "Authorization: Bearer $TOKEN"
            echo "Intento de eliminación de archivo completado."
          fi
          
          if [ -n "$EVENT_ID" ]; then
            echo "Limpiando: Intentando eliminar evento '$EVENT_ID'..."
            curl -s -X DELETE "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/calendar/events/$EVENT_ID" -H "Authorization: Bearer $TOKEN"
            echo "Intento de eliminación de evento completado."
          fi

          # Eliminar documento de OneDrive
          echo "Limpiando: Intentando eliminar documento de OneDrive..."
          curl -s -X DELETE "https://graph.microsoft.com/v1.0/me/drive/root:/reportes/actividad-${{ env.UNIQUE_SUFFIX }}.txt" -H "Authorization: Bearer $TOKEN"
          echo "Intento de eliminación de documento de OneDrive completado."

      - name: 12. Registrar fin de actividad y hacer commit
        if: success()
        run: |
          echo "Fin de actividad de desarrollo: $(date)" >> activity.log
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          if ! git diff --quiet activity.log; then
            git add activity.log
            git commit -m "Registro: Actividad E5 (${{ env.UNIQUE_SUFFIX }})"
            git push
          else
            echo "Sin cambios en activity.log para commitear."
          fi
