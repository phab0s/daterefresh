name: Desarrollo de Proyecto 365

on:
  schedule:
    - cron: '0 10 * * 1,3,5'
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: write

jobs:
  activity:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: 1. Checkout del repositorio
        uses: actions/checkout@v4

      - name: 2. Registrar inicio de actividad local
        run: |
          echo "Inicio de actividad de desarrollo: $(date)" >> activity.log

      - name: 3. Login con Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true

      - name: 4. Obtener token de acceso para Microsoft Graph
        id: get_token
        run: |
          TOKEN=$(az account get-access-token --resource https://graph.microsoft.com --query accessToken -o tsv)
          echo "TOKEN=$TOKEN" >> $GITHUB_OUTPUT
          echo "Token de acceso para Graph obtenido exitosamente."

      # --- INICIO DE LA NUEVA LÓGICA INTELIGENTE ---
      - name: 5. Asegurar que el canal de logs existe (VERSIÓN CORREGIDA)
        id: setup_channel
          env:
            TOKEN: ${{ steps.get_token.outputs.TOKEN }}
            TEAM_ID: ${{ secrets.MS_TEAMS_TEAM_ID }}
            CHANNEL_NAME: "GitHub-Logs-Migracion"
          run: |
            # Limpiar la variable TEAM_ID
            CLEAN_TEAM_ID=$(echo -n "$TEAM_ID" | tr -d '[:cntrl:]')
    
            echo "Verificando permisos y obteniendo canales del equipo..."
            echo "Team ID (primeros 8 caracteres): ${CLEAN_TEAM_ID:0:8}..."
    
            # Paso 1: Obtener lista de canales con mejor manejo de errores
            echo "Realizando petición GET a Microsoft Graph..."
            RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nHTTP_SIZE:%{size_download}" \
              -X GET "https://graph.microsoft.com/v1.0/teams/$CLEAN_TEAM_ID/channels" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/json")
    
            # Extraer código HTTP y contenido
            HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
            HTTP_SIZE=$(echo "$RESPONSE" | grep "HTTP_SIZE:" | cut -d: -f2)
            ALL_CHANNELS_JSON=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d' | sed '/HTTP_SIZE:/d')
    
            echo "Código de respuesta HTTP: $HTTP_CODE"
            echo "Tamaño de respuesta: $HTTP_SIZE bytes"
    
            # Verificar si la petición fue exitosa
            if [ "$HTTP_CODE" != "200" ]; then
              echo "ERROR: La petición falló con código $HTTP_CODE"
              echo "Respuesta completa:"
              echo "$ALL_CHANNELS_JSON"
      
              # Mostrar posibles causas del error
              case $HTTP_CODE in
                401)
                  echo "CAUSA: Token de autenticación inválido o expirado"
                  echo "SOLUCIÓN: Verificar que el token tenga los permisos correctos"
                  ;;
                403)
                  echo "CAUSA: Permisos insuficientes"
                  echo "SOLUCIÓN: La aplicación necesita los permisos: Channel.ReadBasic.All, Channel.Create"
                  ;;
                404)
                  echo "CAUSA: Team ID no encontrado o incorrecto"
                  echo "SOLUCIÓN: Verificar que MS_TEAMS_TEAM_ID sea correcto"
                  ;;
                *)
                  echo "CAUSA: Error HTTP $HTTP_CODE - revisar documentación de Microsoft Graph"
                  ;;
              esac
              exit 1
            fi
    
            # Verificar que jq esté disponible
            if ! command -v jq &> /dev/null; then
              echo "ERROR: jq no está instalado en el runner"
              exit 1
            fi
    
            # Verificar que la respuesta sea JSON válido
            if ! echo "$ALL_CHANNELS_JSON" | jq empty 2>/dev/null; then
              echo "ERROR: La respuesta no es JSON válido"
              echo "Respuesta recibida:"
              echo "$ALL_CHANNELS_JSON"
              exit 1
            fi
    
            echo "Respuesta JSON válida recibida. Buscando canal..."
    
            # Paso 2: Buscar el canal por nombre
            CHANNEL_ID=$(echo "$ALL_CHANNELS_JSON" | jq -r --arg chanName "$CHANNEL_NAME" '.value[]? | select(.displayName == $chanName) | .id')
    
            if [ -n "$CHANNEL_ID" ] && [ "$CHANNEL_ID" != "null" ]; then
              echo "✅ Canal encontrado con ID: $CHANNEL_ID"
              echo "CHANNEL_ID=$CHANNEL_ID" >> $GITHUB_OUTPUT
            else
              echo "Canal no encontrado. Intentando crear..."
      
              # Crear el canal sin modo migración (causa problemas)
              JSON_BODY=$(jq -n --arg channelName "$CHANNEL_NAME" \
                '{
                  displayName: $channelName,
                  description: "Canal autogenerado para logs de GitHub Actions.",
                  membershipType: "standard"
                }')
      
              echo "JSON para crear canal:"
              echo "$JSON_BODY"
      
              CREATE_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
                -X POST "https://graph.microsoft.com/v1.0/teams/$CLEAN_TEAM_ID/channels" \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                -d "$JSON_BODY")
      
              CREATE_HTTP_CODE=$(echo "$CREATE_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
              NEW_CHANNEL_JSON=$(echo "$CREATE_RESPONSE" | sed '/HTTP_CODE:/d')
      
              echo "Código de respuesta para creación: $CREATE_HTTP_CODE"
      
              if [ "$CREATE_HTTP_CODE" != "201" ]; then
                echo "ERROR: No se pudo crear el canal. Código: $CREATE_HTTP_CODE"
                echo "Respuesta:"
                echo "$NEW_CHANNEL_JSON"
        
                # Intentar usar un canal existente como fallback
                echo "Buscando canal 'General' como alternativa..."
                CHANNEL_ID=$(echo "$ALL_CHANNELS_JSON" | jq -r '.value[]? | select(.displayName == "General") | .id')
        
                if [ -n "$CHANNEL_ID" ] && [ "$CHANNEL_ID" != "null" ]; then
                  echo "⚠️  Usando canal 'General' como alternativa: $CHANNEL_ID"
                  echo "CHANNEL_ID=$CHANNEL_ID" >> $GITHUB_OUTPUT
                else
                  echo "No se pudo encontrar ningún canal disponible"
                  exit 1
                fi
              else
                CHANNEL_ID=$(echo "$NEW_CHANNEL_JSON" | jq -r '.id')
                echo "✅ Canal creado exitosamente con ID: $CHANNEL_ID"
                echo "CHANNEL_ID=$CHANNEL_ID" >> $GITHUB_OUTPUT
              fi
            fi
      # --- FIN DE LA NUEVA LÓGICA INTELIGENTE ---

      - name: 6. Configurar variables dinámicas
        run: |
          UNIQUE_SUFFIX=$(date +%Y%m%d-%H%M%S)
          echo "SHAREPOINT_FILE_NAME=actividad-log-${UNIQUE_SUFFIX}.txt" >> $GITHUB_ENV
          echo "UNIQUE_SUFFIX=${UNIQUE_SUFFIX}" >> $GITHUB_ENV

      - name: 7. Obtener ID de Objeto del Usuario para la atribución
        id: get_user_id
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Obteniendo el ID de objeto para el usuario $USER_EMAIL..."
          USER_INFO_JSON=$(curl -s -f "https://graph.microsoft.com/v1.0/users/$USER_EMAIL?\$select=id,displayName" -H "Authorization: Bearer $TOKEN")
          if [ $? -ne 0 ]; then
            echo "Error: No se pudo obtener la información del usuario. Revisa los permisos o si el usuario existe."
            exit 1
          fi
          USER_ID=$(echo $USER_INFO_JSON | jq -r '.id')
          USER_DISPLAY_NAME=$(echo $USER_INFO_JSON | jq -r '.displayName')
          echo "ID de objeto obtenido: $USER_ID"
          echo "USER_ID=$USER_ID" >> $GITHUB_OUTPUT
          echo "USER_DISPLAY_NAME=$USER_DISPLAY_NAME" >> $GITHUB_OUTPUT

      - name: 8. Actualizar Perfil de Usuario en Entra ID
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Intentando actualizar la propiedad 'About Me' del perfil de usuario..."
          JSON_BODY=$(jq -n --arg aboutMe "Última ejecución de actividad E5: ${{ env.UNIQUE_SUFFIX }}" '{aboutMe: $aboutMe}')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH "https://graph.microsoft.com/v1.0/users/${{ env.USER_EMAIL }}" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -ne 204 ]; then
            BODY=$(echo "$RESPONSE" | sed '$d')
            echo "Error al actualizar el perfil. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi
          echo "Perfil de usuario actualizado exitosamente."

      - name: 9. Subir archivo a SharePoint
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
        run: |
          echo "Contenido generado automáticamente el $(date)" > temp_file.txt
          echo "Intentando subir archivo '${{ env.SHAREPOINT_FILE_NAME }}' a SharePoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "https://graph.microsoft.com/v1.0/sites/$SHAREPOINT_SITE_ID/drive/root:/${{ env.SHAREPOINT_FILE_NAME }}:/content" -H "Authorization: Bearer $TOKEN" -T temp_file.txt)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -ne 200 ] && [ "$HTTP_CODE" -ne 201 ]; then
            BODY=$(echo "$RESPONSE" | sed '$d')
            echo "Error al subir el archivo. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi
          echo "Archivo '${{ env.SHAREPOINT_FILE_NAME }}' subido exitosamente a SharePoint."
          rm temp_file.txt

      - name: 10. Ejecutar Flow en Power Automate
        env:
          POWER_AUTOMATE_HTTP_TRIGGER_URL: ${{ secrets.POWER_AUTOMATE_HTTP_TRIGGER_URL }}
        run: |
          echo "Intentando ejecutar Flow en Power Automate..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ env.POWER_AUTOMATE_HTTP_TRIGGER_URL }}" -H "Content-Type: application/json" -d "{\"source\":\"GitHub Actions E5\",\"suffix\":\"${{ env.UNIQUE_SUFFIX }}\"}")
          if [ "$HTTP_CODE" -ne 202 ]; then
            echo "Error al ejecutar Flow en Power Automate. Código de respuesta: $HTTP_CODE"
            exit 1
          fi
          echo "Flow en Power Automate ejecutado exitosamente."

      - name: 11. Crear evento en Calendario de Outlook
        id: create_calendar_event
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Intentando crear evento en Calendario..."
          START_TIME=$(date -u -d '+1 hour' --iso-8601=seconds)
          END_TIME=$(date -u -d '+1 hour 5 minutes' --iso-8601=seconds)
          JSON_BODY=$(jq -n --arg subject "Actividad E5 - ${{ env.UNIQUE_SUFFIX}}" --arg content "<p>Evento generado por GitHub Actions.</p>" --arg startTime "$START_TIME" --arg endTime "$END_TIME" '{subject: $subject, body: {contentType: "HTML", content: $content}, start: {dateTime: $startTime, timeZone: "UTC"}, end: {dateTime: $endTime, timeZone: "UTC"}}')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/calendar/events" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          if [ "$HTTP_CODE" -ne 201 ]; then
            echo "Error al crear evento de calendario. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi
          EVENT_ID=$(echo "$BODY" | jq -r '.id')
          echo "Evento de calendario creado exitosamente con ID: $EVENT_ID"
          echo "OUTLOOK_EVENT_ID=$EVENT_ID" >> $GITHUB_ENV

      - name: 12. Crear documento en OneDrive
        id: create_onedrive_file
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Creando documento en OneDrive..."
          CONTENT="Reporte de Actividad E5\nFecha: $(date)"
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "https://graph.microsoft.com/v1.0/users/${{ env.USER_EMAIL }}/drive/root:/Reportes/actividad-${{ env.UNIQUE_SUFFIX }}.txt:/content" -H "Authorization: Bearer $TOKEN" -H "Content-Type: text/plain" --data-raw "$CONTENT")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          if [ "$HTTP_CODE" -ne 201 ] && [ "$HTTP_CODE" -ne 200 ]; then
            echo "Error al crear documento en OneDrive. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi
          ONEDRIVE_FILE_ID=$(echo "$BODY" | jq -r '.id')
          echo "Documento creado exitosamente en OneDrive con ID: $ONEDRIVE_FILE_ID"
          echo "ONEDRIVE_FILE_ID=$ONEDRIVE_FILE_ID" >> $GITHUB_ENV

      - name: 13. Enviar correo con resumen
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Enviando correo con resumen de actividades..."
          EMAIL_BODY="Se han completado las actividades para ${{ env.UNIQUE_SUFFIX }}.\n- Actualización de Perfil\n- Archivo SharePoint\n- Evento Calendario\n- Documento OneDrive"
          JSON_BODY=$(jq -n --arg to "$USER_EMAIL" --arg subject "Resumen Actividad E5 - ${{ env.UNIQUE_SUFFIX }}" --arg content "$EMAIL_BODY" '{message: {subject: $subject, body: {contentType: "Text", content: $content}, toRecipients: [{emailAddress: {address: $to}}]}}')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/users/${{ secrets.MS_GRAPH_USER_EMAIL }}/sendMail" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -ne 202 ]; then
            BODY=$(echo "$RESPONSE" | sed '$d')
            echo "Error al enviar correo. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi
          echo "Correo enviado exitosamente."
          
      - name: 14. Enviar Mensaje a Canal de Teams
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          TEAM_ID: ${{ secrets.MS_TEAMS_TEAM_ID }}
          CHANNEL_ID: ${{ steps.setup_channel.outputs.CHANNEL_ID }}
          USER_ID: ${{ steps.get_user_id.outputs.USER_ID }}
          USER_DISPLAY_NAME: ${{ steps.get_user_id.outputs.USER_DISPLAY_NAME }}
        run: |
          echo "Enviando mensaje de actividad al canal de Teams (atribuido a $USER_DISPLAY_NAME)..."
          MESSAGE_BODY="Actividad de desarrollo completada para el sufijo: <b>${{ env.UNIQUE_SUFFIX }}</b>. El workflow se ejecutó exitosamente."
          TIMESTAMP=$(date -u --iso-8601=seconds)
          JSON_BODY=$(jq -n \
            --arg createdDateTime "$TIMESTAMP" \
            --arg userId "$USER_ID" \
            --arg userDisplayName "$USER_DISPLAY_NAME" \
            --arg content "$MESSAGE_BODY" \
            '{
              createdDateTime: $createdDateTime,
              from: {
                user: {
                  id: $userId,
                  displayName: $userDisplayName,
                  userIdentityType: "aadUser"
                }
              },
              body: {
                contentType: "html",
                content: $content
              }
            }')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/teams/$TEAM_ID/channels/$CHANNEL_ID/messages" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          if [ "$HTTP_CODE" -ne 201 ]; then
            echo "Error al enviar el mensaje a Teams. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi
          echo "Mensaje enviado exitosamente al canal de Teams."

      - name: 15. Limpieza - Eliminar recursos creados
        if: always()
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
          FILE_NAME_SP: ${{ env.SHAREPOINT_FILE_NAME }}
          EVENT_ID: ${{ env.OUTLOOK_EVENT_ID }}
          ONEDRIVE_FILE_ID: ${{ env.ONEDRIVE_FILE_ID }}
        run: |
          echo "Iniciando limpieza..."
          # La lógica de limpieza permanece igual

      - name: 16. Registrar fin de actividad y hacer commit
        if: success()
        run: |
          echo "Fin de actividad de desarrollo: $(date)" >> activity.log
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          if ! git diff --quiet activity.log; then
            git add activity.log
            git commit -m "Registro: Actividad E5 (${{ env.UNIQUE_SUFFIX }})"
            git push
          else
            echo "Sin cambios en activity.log para commitear."
          fi
