name: Actividad de Desarrollo E5

on:
  schedule:
    - cron: '0 0 * * 1' # Ejecutar cada lunes a medianoche UTC
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  activity:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Registrar inicio de actividad local
        run: echo "Inicio de actividad de desarrollo: $(date)" >> activity.log

      # Este login sigue siendo útil para los otros pasos de Graph API (Teams, SharePoint, Calendar)
      - name: Login con Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Obtener token de Microsoft Graph # Sigue siendo necesario para Teams, SharePoint, Calendar
        id: get_token
        run: |
          TOKEN=$(az account get-access-token \
            --resource https://graph.microsoft.com \
            --query accessToken -o tsv)
          echo "TOKEN=$TOKEN" >> $GITHUB_OUTPUT
          echo "Token de acceso para Graph obtenido exitosamente."

      - name: Configurar variables para Teams y SharePoint
        run: |
          UNIQUE_SUFFIX=$(date +%Y%m%d%H%M%S)
          echo "TEAMS_CHANNEL_NAME=auto-canal-${UNIQUE_SUFFIX}" >> $GITHUB_ENV
          echo "SHAREPOINT_FILE_NAME=actividad-log-${UNIQUE_SUFFIX}.txt" >> $GITHUB_ENV
          echo "UNIQUE_SUFFIX=${UNIQUE_SUFFIX}" >> $GITHUB_ENV

      # --- Llamadas a Microsoft Graph API para Actividad (sin cambios, ya que funcionan con token de app) ---

      - name: 1. Crear canal en Teams
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          TEAM_ID: ${{ secrets.MS_TEAMS_TEAM_ID }}
          CHANNEL_NAME: ${{ env.TEAMS_CHANNEL_NAME }}
        run: |
          echo "Intentando crear canal '$CHANNEL_NAME' en Teams..."
          RESPONSE=$(curl -s -X POST "https://graph.microsoft.com/v1.0/teams/$TEAM_ID/channels" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"displayName\":\"$CHANNEL_NAME\",\"description\":\"Canal automático generado por GitHub Actions para actividad E5\",\"membershipType\":\"standard\"}")

          if echo "$RESPONSE" | grep -q "id"; then
            CHANNEL_ID=$(echo "$RESPONSE" | jq -r '.id')
            echo "Canal '$CHANNEL_NAME' creado exitosamente con ID: $CHANNEL_ID"
            echo "TEAMS_CHANNEL_ID=$CHANNEL_ID" >> $GITHUB_ENV
          else
            echo "Error al crear el canal: $RESPONSE"
            exit 1
          fi

      - name: 2. Subir archivo a SharePoint
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
          SHAREPOINT_FILE_NAME: ${{ env.SHAREPOINT_FILE_NAME }}
        run: |
          echo "Contenido generado automáticamente el $(date)" > temp_file.txt
          echo "Intentando subir archivo '$SHAREPOINT_FILE_NAME' a SharePoint..."
          RESPONSE=$(curl -s -X PUT \
            "https://graph.microsoft.com/v1.0/sites/$SHAREPOINT_SITE_ID/drive/root:/$SHAREPOINT_FILE_NAME:/content" \
            -H "Authorization: Bearer $TOKEN" \
            --upload-file temp_file.txt)

          if echo "$RESPONSE" | grep -q "id"; then
            echo "Archivo '$SHAREPOINT_FILE_NAME' subido exitosamente a SharePoint."
          else
            echo "Error al subir el archivo a SharePoint: $RESPONSE"
            exit 1
          fi
          rm temp_file.txt

      - name: 3. Ejecutar Flow en Power Automate # <--- ¡CAMBIO AQUÍ!
        env:
          # TOKEN: ${{ steps.get_token.outputs.TOKEN }} # Ya no necesitas el token de Graph aquí
          POWER_AUTOMATE_HTTP_TRIGGER_URL: ${{ secrets.POWER_AUTOMATE_HTTP_TRIGGER_URL }} # NUEVO SECRETO
        run: |
          echo "Intentando ejecutar Flow en Power Automate mediante desencadenador HTTP..."
          # Asegúrate de que la URL del desencadenador HTTP es correcta
          RESPONSE=$(curl -s -X POST "${{ env.POWER_AUTOMATE_HTTP_TRIGGER_URL }}" \
            -H "Content-Type: application/json" \
            -d "{\"message\":\"Actividad automatica desde GitHub Actions para E5\"}") # Puedes enviar un body vacío o uno con datos
          
          # La respuesta del HTTP trigger no siempre contiene un ID directo como Graph,
          # pero una respuesta 202 Accepted suele indicar que el flujo se inició.
          # O puedes configurar el flujo para devolver un JSON específico.
          if [ "$(echo "$RESPONSE" | jq -r '.status')" == "202" ]; then
             echo "Flow en Power Automate ejecutado exitosamente (respuesta 202 Accepted)."
          else
             echo "Respuesta del Flow: $RESPONSE"
             echo "Error al ejecutar Flow en Power Automate o respuesta inesperada."
             # Decide si quieres que este paso falle si la respuesta no es 202
             # exit 1
          fi


      - name: 4. Crear evento en Calendario de Outlook
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Intentando crear evento en Calendario..."
          FECHA_HORA=$(date -u +"%Y-%m-%dT%H:%M:00.000Z" --date='+1 hour')
          RESPONSE=$(curl -s -X POST "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/calendar/events" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
                  \"subject\": \"Actividad automatica E5 - ${{ env.UNIQUE_SUFFIX}}\",
                  \"body\": {
                    \"contentType\": \"HTML\",
                    \"content\": \"<p>Evento de prueba generado por GitHub Actions para mantener actividad E5.</p>\"
                  },
                  \"start\": {
                    \"dateTime\": \"$FECHA_HORA\",
                    \"timeZone\": \"UTC\"
                  },
                  \"end\": {
                    \"dateTime\": \"$FECHA_HORA\",
                    \"timeZone\": \"UTC\"
                  }
                }")

          if echo "$RESPONSE" | grep -q "id"; then
            EVENT_ID=$(echo "$RESPONSE" | jq -r '.id')
            echo "Evento de calendario creado exitosamente con ID: $EVENT_ID"
            echo "OUTLOOK_EVENT_ID=$EVENT_ID" >> $GITHUB_ENV
          else
            echo "Error al crear evento de calendario: $RESPONSE"
          fi

      - name: 5. Enviar mensaje de chat en Teams (Opcional)
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          CHAT_ID: ${{ secrets.MS_TEAMS_CHAT_ID }}
        run: |
          if [ -z "$CHAT_ID" ]; then
            echo "MS_TEAMS_CHAT_ID no configurado, omitiendo envío de mensaje de chat."
          else
            echo "Intentando enviar mensaje de chat en Teams..."
            RESPONSE=$(curl -s -X POST "https://graph.microsoft.com/v1.0/chats/$CHAT_ID/messages" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                    \"body\": {
                      \"contentType\": \"html\",
                      \"content\": \"<p>Hola desde GitHub Actions. Actividad E5: ${{ env.UNIQUE_SUFFIX}}</p>\"
                    }
                  }")
            if echo "$RESPONSE" | grep -q "id"; then
              echo "Mensaje de chat enviado exitosamente."
            else
              echo "Error al enviar mensaje de chat: $RESPONSE"
            fi
          fi

      # --- Pasos de Limpieza (MUY RECOMENDADO) ---

      - name: Eliminar canal de Teams (Limpieza)
        if: success() && env.TEAMS_CHANNEL_ID
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          TEAM_ID: ${{ secrets.MS_TEAMS_TEAM_ID }}
          CHANNEL_ID: ${{ env.TEAMS_CHANNEL_ID }}
        run: |
          echo "Intentando eliminar canal '$CHANNEL_ID' de Teams..."
          curl -s -X DELETE "https://graph.microsoft.com/v1.0/teams/$TEAM_ID/channels/$CHANNEL_ID" \
            -H "Authorization: Bearer $TOKEN"
          echo "Canal '$CHANNEL_ID' eliminado (o intento de eliminación)."

      - name: Eliminar archivo de SharePoint (Limpieza)
        if: success()
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
          SHAREPOINT_FILE_NAME: ${{ env.SHAREPOINT_FILE_NAME }}
        run: |
          echo "Intentando eliminar archivo '$SHAREPOINT_FILE_NAME' de SharePoint..."
          curl -s -X DELETE "https://graph.microsoft.com/v1.0/sites/$SHAREPOINT_SITE_ID/drive/root:/$SHAREPOINT_FILE_NAME" \
            -H "Authorization: Bearer $TOKEN"
          echo "Archivo '$SHAREPOINT_FILE_NAME' eliminado (o intento de eliminación)."

      - name: Eliminar evento de Calendario (Limpieza)
        if: success() && env.OUTLOOK_EVENT_ID
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
          EVENT_ID: ${{ env.OUTLOOK_EVENT_ID }}
        run: |
          echo "Intentando eliminar evento '$EVENT_ID' del Calendario..."
          curl -s -X DELETE "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/calendar/events/$EVENT_ID" \
            -H "Authorization: Bearer $TOKEN"
          echo "Evento '$EVENT_ID' eliminado (o intento de eliminación)."

      - name: Registrar fin de actividad local y commit
        run: |
          echo "Fin de actividad de desarrollo: $(date)" >> activity.log
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add activity.log || true
          git commit -m "Actividad E5 completada con sufijo ${{ env.UNIQUE_SUFFIX}} ($(date))" || echo "Sin cambios para commitear"
          git push origin HEAD || true
