name: Actividad de Desarrollo E5

on:
  schedule:
    - cron: '0 10 * * 1,3,5'
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: write

jobs:
  activity:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: 1. Checkout del repositorio
        uses: actions/checkout@v4

      - name: 2. Registrar inicio de actividad local
        run: |
          echo "Inicio de actividad de desarrollo: $(date)" >> activity.log

      - name: 3. Login con Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true

      - name: 4. Obtener token de acceso para Microsoft Graph
        id: get_token
        run: |
          TOKEN=$(az account get-access-token --resource https://graph.microsoft.com --query accessToken -o tsv)
          echo "TOKEN=$TOKEN" >> $GITHUB_OUTPUT
          echo "Token de acceso para Graph obtenido exitosamente."

      - name: 5. Configurar variables dinámicas
        run: |
          UNIQUE_SUFFIX=$(date +%Y%m%d-%H%M%S)
          echo "SHAREPOINT_FILE_NAME=actividad-log-${UNIQUE_SUFFIX}.txt" >> $GITHUB_ENV
          echo "UNIQUE_SUFFIX=${UNIQUE_SUFFIX}" >> $GITHUB_ENV

      - name: 6. Actualizar Perfil de Usuario en Entra ID
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Intentando actualizar la propiedad 'About Me' del perfil de usuario..."
          JSON_BODY=$(jq -n --arg aboutMe "Última ejecución de actividad E5: ${{ env.UNIQUE_SUFFIX }}" '{aboutMe: $aboutMe}')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH "https://graph.microsoft.com/v1.0/users/${{ env.USER_EMAIL }}" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -eq 204 ]; then
            echo "Perfil de usuario actualizado exitosamente."
          else
            BODY=$(echo "$RESPONSE" | sed '$d')
            echo "Error al actualizar el perfil. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi

      - name: 7. Subir archivo a SharePoint
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
        run: |
          echo "Contenido generado automáticamente el $(date)" > temp_file.txt
          echo "Intentando subir archivo '${{ env.SHAREPOINT_FILE_NAME }}' a SharePoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "https://graph.microsoft.com/v1.0/sites/$SHAREPOINT_SITE_ID/drive/root:/${{ env.SHAREPOINT_FILE_NAME }}:/content" -H "Authorization: Bearer $TOKEN" -T temp_file.txt)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "Archivo '${{ env.SHAREPOINT_FILE_NAME }}' subido exitosamente a SharePoint."
          else
            echo "Error al subir el archivo. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi
          rm temp_file.txt

      - name: 8. Ejecutar Flow en Power Automate
        env:
          POWER_AUTOMATE_HTTP_TRIGGER_URL: ${{ secrets.POWER_AUTOMATE_HTTP_TRIGGER_URL }}
        run: |
          echo "Intentando ejecutar Flow en Power Automate (sin token de autorización)..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ env.POWER_AUTOMATE_HTTP_TRIGGER_URL }}" -H "Content-Type: application/json" -d "{\"source\":\"GitHub Actions E5\",\"suffix\":\"${{ env.UNIQUE_SUFFIX }}\"}")
          if [ "$HTTP_CODE" -eq 202 ]; then
            echo "Flow en Power Automate ejecutado exitosamente."
          else
            echo "Error al ejecutar Flow en Power Automate. Código de respuesta: $HTTP_CODE"
            exit 1
          fi

      - name: 9. Crear evento en Calendario de Outlook
        id: create_calendar_event
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Intentando crear evento en Calendario..."
          START_TIME=$(date -u -d '+1 hour' --iso-8601=seconds)
          END_TIME=$(date -u -d '+1 hour 5 minutes' --iso-8601=seconds)
          JSON_BODY=$(jq -n --arg subject "Actividad E5 - ${{ env.UNIQUE_SUFFIX}}" --arg content "<p>Evento generado por GitHub Actions.</p>" --arg startTime "$START_TIME" --arg endTime "$END_TIME" '{subject: $subject, body: {contentType: "HTML", content: $content}, start: {dateTime: $startTime, timeZone: "UTC"}, end: {dateTime: $endTime, timeZone: "UTC"}}')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/calendar/events" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          if [ "$HTTP_CODE" -eq 201 ]; then
            EVENT_ID=$(echo "$BODY" | jq -r '.id')
            echo "Evento de calendario creado exitosamente con ID: $EVENT_ID"
            echo "OUTLOOK_EVENT_ID=$EVENT_ID" >> $GITHUB_ENV
          else
            echo "Error al crear evento de calendario. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi

      - name: 10. Crear documento en OneDrive
        id: create_onedrive_file
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Creando documento en OneDrive..."
          CONTENT="Reporte de Actividad E5\nFecha: $(date)"
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "https://graph.microsoft.com/v1.0/users/${{ env.USER_EMAIL }}/drive/root:/Reportes/actividad-${{ env.UNIQUE_SUFFIX }}.txt:/content" -H "Authorization: Bearer $TOKEN" -H "Content-Type: text/plain" --data-raw "$CONTENT")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          if [ "$HTTP_CODE" -eq 201 ] || [ "$HTTP_CODE" -eq 200 ]; then
            ONEDRIVE_FILE_ID=$(echo "$BODY" | jq -r '.id')
            echo "Documento creado exitosamente en OneDrive con ID: $ONEDRIVE_FILE_ID"
            echo "ONEDRIVE_FILE_ID=$ONEDRIVE_FILE_ID" >> $GITHUB_ENV
          else
            echo "Error al crear documento en OneDrive. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi

      - name: 11. Enviar correo con resumen
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
        run: |
          echo "Enviando correo con resumen de actividades..."
          EMAIL_BODY="Se han completado las actividades para ${{ env.UNIQUE_SUFFIX }}.\n- Actualización de Perfil\n- Archivo SharePoint\n- Evento Calendario\n- Documento OneDrive"
          JSON_BODY=$(jq -n --arg to "$USER_EMAIL" --arg subject "Resumen Actividad E5 - ${{ env.UNIQUE_SUFFIX }}" --arg content "$EMAIL_BODY" '{message: {subject: $subject, body: {contentType: "Text", content: $content}, toRecipients: [{emailAddress: {address: $to}}]}}')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/users/${{ secrets.MS_GRAPH_USER_EMAIL }}/sendMail" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -eq 202 ]; then
            echo "Correo enviado exitosamente."
          else
            BODY=$(echo "$RESPONSE" | sed '$d')
            echo "Error al enviar correo. Código: $HTTP_CODE, Respuesta: $BODY"
            exit 1
          fi

      - name: Limpieza - Eliminar recursos creados
        if: always()
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
          FILE_NAME_SP: ${{ env.SHAREPOINT_FILE_NAME }}
          EVENT_ID: ${{ steps.create_calendar_event.outputs.OUTLOOK_EVENT_ID }}
          ONEDRIVE_FILE_ID: ${{ steps.create_onedrive_file.outputs.ONEDRIVE_FILE_ID }}
        run: |
          echo "Iniciando limpieza..."
          if [ -n "$FILE_NAME_SP" ]; then
            echo "Eliminando archivo de SharePoint..."
            curl -s -f -X DELETE "https://graph.microsoft.com/v1.0/sites/$SHAREPOINT_SITE_ID/drive/root:/$FILE_NAME_SP" -H "Authorization: Bearer $TOKEN"
          fi
          if [ -n "$EVENT_ID" ]; then
            echo "Eliminando evento del Calendario..."
            curl -s -f -X DELETE "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/calendar/events/$EVENT_ID" -H "Authorization: Bearer $TOKEN"
          fi
          if [ -n "$ONEDRIVE_FILE_ID" ]; then
            echo "Eliminando documento de OneDrive..."
            curl -s -f -X DELETE "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/drive/items/$ONEDRIVE_FILE_ID" -H "Authorization: Bearer $TOKEN"
          fi
          echo "Limpieza completada."

      - name: 12. Registrar fin de actividad y hacer commit
        if: success()
        run: |
          echo "Fin de actividad de desarrollo: $(date)" >> activity.log
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          if ! git diff --quiet activity.log; then
            git add activity.log
            git commit -m "Registro: Actividad E5 (${{ env.UNIQUE_SUFFIX }})"
            git push
          else
            echo "Sin cambios en activity.log para commitear."
          fi
