name: Desarrollo de Proyecto 365

on:
  schedule:
    - cron: '0 10 * * 1,3,5' # Ejecuta a las 10:00 UTC los Lunes, Mi√©rcoles y Viernes
  workflow_dispatch: {}

permissions:
  id-token: write   # Necesario para el login con OIDC en Azure
  contents: write   # Necesario para hacer commit del activity.log

jobs:
  activity:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: 1. Checkout del repositorio
        uses: actions/checkout@v4

      - name: 2. Configurar variables din√°micas
        id: set_vars
        run: |
          UNIQUE_SUFFIX=$(date +%Y%m%d-%H%M%S)
          echo "UNIQUE_SUFFIX=${UNIQUE_SUFFIX}" >> $GITHUB_OUTPUT
          echo "SHAREPOINT_FILE_NAME=actividad-log-${UNIQUE_SUFFIX}.txt" >> $GITHUB_OUTPUT
          echo "OUTLOOK_START_TIME=$(date -u -d '+1 hour' --iso-8601=seconds)" >> $GITHUB_OUTPUT
          echo "OUTLOOK_END_TIME=$(date -u -d '+1 hour 5 minutes' --iso-8601=seconds)" >> $GITHUB_OUTPUT

      - name: 3. Registrar inicio de actividad local
        run: |
          echo "Inicio de actividad de desarrollo: $(date)" >> activity.log

      - name: 4. Login con Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true

      - name: 5. Obtener token de acceso para Microsoft Graph
        id: get_token
        run: |
          TOKEN=$(az account get-access-token --resource https://graph.microsoft.com --query accessToken -o tsv)
          echo "TOKEN=$TOKEN" >> $GITHUB_OUTPUT
          echo "::add-mask::$TOKEN" # Mascarar el token en los logs
          echo "Token de acceso para Graph obtenido exitosamente."

      - name: 6. Asegurar que el canal de logs existe y es utilizable
        id: setup_channel
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          TEAM_ID: ${{ secrets.MS_TEAMS_TEAM_ID }}
          CHANNEL_NAME: "GitHub-Activity-Log" # O el nuevo nombre que elijas
        run: |
          CLEAN_TEAM_ID=$(echo -n "$TEAM_ID" | tr -d '[:cntrl:]')
          echo "Buscando canales en el equipo..."
          ALL_CHANNELS_JSON=$(curl -s -f -X GET "https://graph.microsoft.com/v1.0/teams/$CLEAN_TEAM_ID/channels" -H "Authorization: Bearer $TOKEN")
          if [ $? -ne 0 ]; then
            echo "‚ùå Error al obtener la lista de canales. Verifica permisos y el TEAM_ID."
            exit 1
          fi

          CHANNEL_ID=$(echo "$ALL_CHANNELS_JSON" | jq -r --arg chanName "$CHANNEL_NAME" '.value[]? | select(.displayName == $chanName) | .id')

          if [ -n "$CHANNEL_ID" ] && [ "$CHANNEL_ID" != "null" ]; then
            echo "‚úÖ Canal '$CHANNEL_NAME' ya exist√≠a."
          else
            echo "Canal '$CHANNEL_NAME' no encontrado. Intentando crear..."
            JSON_BODY=$(jq -n --arg channelName "$CHANNEL_NAME" '{displayName: $channelName, description: "Canal para logs de GitHub Actions"}')
            CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/teams/$CLEAN_TEAM_ID/channels" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
            CREATE_HTTP_CODE=$(echo "$CREATE_RESPONSE" | tail -n1)
            NEW_CHANNEL_JSON=$(echo "$CREATE_RESPONSE" | sed '$d')

            if [ "$CREATE_HTTP_CODE" = "201" ]; then
              CHANNEL_ID=$(echo "$NEW_CHANNEL_JSON" | jq -r '.id')
              echo "‚úÖ Canal creado exitosamente: $CHANNEL_ID"
              echo "Completando migraci√≥n del canal..."
              MIGRATE_RESPONSE=$(curl -s -w "%{http_code}" -X POST "https://graph.microsoft.com/v1.0/teams/$CLEAN_TEAM_ID/channels/$CHANNEL_ID/completeMigration" -H "Authorization: Bearer $TOKEN" -H "Content-Length: 0")
              if [ "$MIGRATE_RESPONSE" = "204" ]; then
                echo "‚úÖ Migraci√≥n de canal completada."
              else
                echo "‚ÑπÔ∏è  No se pudo completar la migraci√≥n (c√≥digo $MIGRATE_RESPONSE). Es seguro continuar."
              fi
            else
              ERROR_CODE=$(echo "$NEW_CHANNEL_JSON" | jq -r '.error.innerError.code // .error.code')
              if [ "$ERROR_CODE" = "NameAlreadyExists" ]; then
                echo "‚ö†Ô∏è ERROR DETECTADO: El nombre de canal '$CHANNEL_NAME' est√° en estado 'soft-deleted'."
                echo "Intentando usar el canal 'General' como fallback..."
                CHANNEL_ID=$(echo "$ALL_CHANNELS_JSON" | jq -r '.value[]? | select(.displayName == "General") | .id')
                if [ -z "$CHANNEL_ID" ] || [ "$CHANNEL_ID" = "null" ]; then
                   echo "‚ùå Fallback fallido: No se pudo encontrar el canal 'General'."
                   exit 1
                fi
                echo "‚úÖ Usando canal 'General' como fallback."
              else
                echo "‚ùå Error fatal e inesperado al crear el canal. C√≥digo: $CREATE_HTTP_CODE"
                echo "$NEW_CHANNEL_JSON"
                exit 1
              fi
            fi
          fi

      - name: 7. Enviar Mensaje a Teams v√≠a Webhook
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          UNIQUE_SUFFIX: ${{ steps.set_vars.outputs.UNIQUE_SUFFIX }}
        run: |
          echo "Enviando mensaje a Teams v√≠a Webhook..."

          # Construir el cuerpo JSON de forma segura usando jq
          # Se han eliminado los comentarios intermedios y las continuaciones de l√≠nea innecesarias para mayor robustez.
          JSON_BODY=$(jq -n \
                        --arg suffix "$UNIQUE_SUFFIX" \
                        --arg repo "${{ github.repository }}" \
                        --arg date_utc "$(date -u --iso-8601=seconds)" \
                        '{
                          "@type": "MessageCard",
                          "@context": "http://schema.org/extensions",
                          "themeColor": "0076D7",
                          "summary": "Actividad de Desarrollo E5",
                          "sections": [{
                            "activityTitle": "ü§ñ <b>Actividad de desarrollo completada</b>",
                            "activitySubtitle": "Ejecutado desde GitHub Actions",
                            "facts": [{
                              "name": "Sufijo de ejecuci√≥n",
                              "value": $suffix
                            }, {
                              "name": "Repositorio",
                              "value": $repo
                            }, {
                              "name": "Fecha (UTC)",
                              "value": $date_utc
                            }],
                            "markdown": true
                          }]
                        }')
          
          # Paso de depuraci√≥n: Imprime el JSON que se va a enviar
          echo "JSON Payload a enviar:"
          echo "$JSON_BODY"

          # Enviar la petici√≥n a Teams
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "$JSON_BODY" \
            "${{ secrets.TEAMS_WEBHOOK_URL }}")

          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "‚úÖ Mensaje enviado exitosamente a Teams."
          else
            echo "‚ùå Error al enviar mensaje a Teams v√≠a Webhook. C√≥digo de respuesta: $RESPONSE_CODE"
          fi

      #      - name: 8. Actualizar Perfil de Usuario en Entra ID (PRUEBA DE DIAGN√ìSTICO)
#        env:
#          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
#          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
#          UNIQUE_SUFFIX: ${{ steps.set_vars.outputs.UNIQUE_SUFFIX }}
#        run: |
#          # Cambiamos 'aboutMe' por 'jobTitle' para la prueba
#          echo "Intentando actualizar el campo 'jobTitle'..."
#          JSON_BODY=$(jq -n --arg jobTitle "Actividad E5: $UNIQUE_SUFFIX" '{jobTitle: $jobTitle}')
#          RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH "https://graph.microsoft.com/v1.0/users/$USER_EMAIL" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
#          if [ "$(echo "$RESPONSE" | tail -n1)" -ne 204 ]; then echo "Error al actualizar el perfil: $(echo "$RESPONSE" | sed '$d')" && exit 1; fi
#          echo "‚úÖ Perfil de usuario actualizado exitosamente."

      - name: 9. Subir archivo a SharePoint
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          SHAREPOINT_SITE_ID: ${{ secrets.SHAREPOINT_SITE_ID }}
          SHAREPOINT_FILE_NAME: ${{ steps.set_vars.outputs.SHAREPOINT_FILE_NAME }}
        run: |
          echo "Contenido generado autom√°ticamente el $(date)" > temp_file.txt
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "https://graph.microsoft.com/v1.0/sites/$SHAREPOINT_SITE_ID/drive/root:/$SHAREPOINT_FILE_NAME:/content" -H "Authorization: Bearer $TOKEN" -T temp_file.txt)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -ne 200 ] && [ "$HTTP_CODE" -ne 201 ]; then echo "Error al subir a SharePoint: $(echo "$RESPONSE" | sed '$d')" && exit 1; fi
          echo "‚úÖ Archivo '$SHAREPOINT_FILE_NAME' subido a SharePoint."
          rm temp_file.txt

      - name: 10. Ejecutar Flow en Power Automate
        env:
          POWER_AUTOMATE_HTTP_TRIGGER_URL: ${{ secrets.POWER_AUTOMATE_HTTP_TRIGGER_URL }}
          UNIQUE_SUFFIX: ${{ steps.set_vars.outputs.UNIQUE_SUFFIX }}
        run: |
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$POWER_AUTOMATE_HTTP_TRIGGER_URL" -H "Content-Type: application/json" -d "{\"source\":\"GitHub Actions E5\",\"suffix\":\"$UNIQUE_SUFFIX\"}")
          if [ "$HTTP_CODE" -ne 202 ]; then echo "Error al ejecutar Flow. C√≥digo: $HTTP_CODE" && exit 1; fi
          echo "‚úÖ Flow en Power Automate ejecutado exitosamente."

      - name: 11. Crear evento en Calendario de Outlook
        id: create_calendar_event
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
          UNIQUE_SUFFIX: ${{ steps.set_vars.outputs.UNIQUE_SUFFIX }}
          START_TIME: ${{ steps.set_vars.outputs.OUTLOOK_START_TIME }}
          END_TIME: ${{ steps.set_vars.outputs.OUTLOOK_END_TIME }}
        run: |
          JSON_BODY=$(jq -n --arg subject "Actividad E5 - $UNIQUE_SUFFIX" --arg content "<p>Evento generado por GitHub Actions.</p>" --arg startTime "$START_TIME" --arg endTime "$END_TIME" '{subject: $subject, body: {contentType: "HTML", content: $content}, start: {dateTime: $startTime, timeZone: "UTC"}, end: {dateTime: $endTime, timeZone: "UTC"}}')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/calendar/events" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          if [ "$HTTP_CODE" -ne 201 ]; then echo "Error al crear evento. C√≥digo: $HTTP_CODE, Respuesta: $BODY" && exit 1; fi
          EVENT_ID=$(echo "$BODY" | jq -r '.id')
          echo "‚úÖ Evento de calendario creado. ID: $EVENT_ID"
          echo "OUTLOOK_EVENT_ID=$EVENT_ID" >> $GITHUB_OUTPUT

      - name: 12. Ciclo CRUD en OneDrive para Actividad de API
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
          UNIQUE_SUFFIX: ${{ steps.set_vars.outputs.UNIQUE_SUFFIX }}
        run: |
          # Opciones de shell para depuraci√≥n y seguridad
          # set -e: Salir inmediatamente si un comando falla.
          # set -x: Imprimir cada comando antes de ejecutarlo (excelente para logs).
          set -ex

          FILE_NAME="actividad-e5-${UNIQUE_SUFFIX}.txt"
          FILE_PATH_URL="https://graph.microsoft.com/v1.0/users/$USER_EMAIL/drive/root:/GitHub-Actions-Logs/$FILE_NAME"
          
          # --- 1. CREAR (Create) ---
          echo "‚úÖ 1. Creando archivo en OneDrive..."
          CONTENT_V1="Reporte de Actividad E5\nFecha de creaci√≥n: $(date)"
          CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X PUT "$FILE_PATH_URL:/content" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: text/plain" \
            --data-raw "$CONTENT_V1")
          
          CREATE_HTTP_CODE=$(echo "$CREATE_RESPONSE" | tail -n1)
          CREATE_BODY=$(echo "$CREATE_RESPONSE" | sed '$d')

          if [ "$CREATE_HTTP_CODE" -ne 201 ] && [ "$CREATE_HTTP_CODE" -ne 200 ]; then
            echo "‚ùå Error al crear el archivo. C√≥digo: $CREATE_HTTP_CODE"
            echo "$CREATE_BODY"
            exit 1
          fi
          
          # Extraer el ID del archivo creado para los siguientes pasos
          FILE_ID=$(echo "$CREATE_BODY" | jq -r '.id')
          echo "Archivo creado con √©xito. ID: $FILE_ID"

          # Peque√±a pausa para asegurar que el archivo est√© listo para las siguientes operaciones
          sleep 5

          # --- 2. LEER (Read) ---
          echo "‚úÖ 2. Leyendo el contenido del archivo..."
          READ_CONTENT=$(curl -s -f -L \
            -H "Authorization: Bearer $TOKEN" \
            "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/drive/items/$FILE_ID/content")
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Error al leer el contenido del archivo."
            # A√∫n as√≠, intentaremos borrarlo en el paso final
          else
            echo "Contenido le√≠do exitosamente: $READ_CONTENT"
          fi

          # --- 3. ACTUALIZAR (Update) ---
          echo "‚úÖ 3. Actualizando el contenido del archivo..."
          CONTENT_V2="$READ_CONTENT\nContenido actualizado: $(date)"
          UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X PUT "$FILE_PATH_URL:/content" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: text/plain" \
            --data-raw "$CONTENT_V2")

          UPDATE_HTTP_CODE=$(echo "$UPDATE_RESPONSE" | tail -n1)
          if [ "$UPDATE_HTTP_CODE" -ne 201 ] && [ "$UPDATE_HTTP_CODE" -ne 200 ]; then
            echo "‚ùå Error al actualizar el archivo. C√≥digo: $UPDATE_HTTP_CODE"
            echo "$(echo "$UPDATE_RESPONSE" | sed '$d')"
          else
            echo "Archivo actualizado exitosamente."
          fi

          sleep 5

          # --- 4. BORRAR (Delete) ---
          # Se ejecuta siempre para limpiar, incluso si un paso intermedio fall√≥
          if [ -n "$FILE_ID" ]; then
            echo "‚úÖ 4. Limpiando (borrando) el archivo creado..."
            DELETE_HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
              -X DELETE \
              -H "Authorization: Bearer $TOKEN" \
              "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/drive/items/$FILE_ID")

            if [ "$DELETE_HTTP_CODE" -ne 204 ]; then
              echo "‚ö†Ô∏è No se pudo eliminar el archivo (C√≥digo: $DELETE_HTTP_CODE). Puede que necesites borrarlo manualmente."
            else
              echo "Archivo borrado exitosamente."
            fi
          fi

          echo "üéâ Ciclo CRUD en OneDrive completado."

      - name: 13. Enviar correo con resumen
        env:
          TOKEN: ${{ steps.get_token.outputs.TOKEN }}
          USER_EMAIL: ${{ secrets.MS_GRAPH_USER_EMAIL }}
          UNIQUE_SUFFIX: ${{ steps.set_vars.outputs.UNIQUE_SUFFIX }}
        run: |
          EMAIL_BODY="Se han completado las actividades para $UNIQUE_SUFFIX.\n- Actualizaci√≥n de Perfil\n- Archivo SharePoint\n- Evento Calendario\n- Documento OneDrive"
          JSON_BODY=$(jq -n --arg to "$USER_EMAIL" --arg subject "Resumen Actividad E5 - $UNIQUE_SUFFIX" --arg content "$EMAIL_BODY" '{message: {subject: $subject, body: {contentType: "Text", content: $content}, toRecipients: [{emailAddress: {address: $to}}]}}')
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://graph.microsoft.com/v1.0/users/$USER_EMAIL/sendMail" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$JSON_BODY")
          if [ "$(echo "$RESPONSE" | tail -n1)" -ne 202 ]; then echo "Error al enviar correo: $(echo "$RESPONSE" | sed '$d')" && exit 1; fi
          echo "‚úÖ Correo de resumen enviado exitosamente."

      - name: 14. Registrar fin de actividad y hacer commit
        if: success()
        env:
          UNIQUE_SUFFIX: ${{ steps.set_vars.outputs.UNIQUE_SUFFIX }}
        run: |
          echo "Fin de actividad de desarrollo: $(date)" >> activity.log
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          if ! git diff --quiet activity.log; then
            git add activity.log
            git commit -m "Registro: Actividad E5 ($UNIQUE_SUFFIX)"
            git push
          else
            echo "Sin cambios en activity.log para commitear."
          fi
